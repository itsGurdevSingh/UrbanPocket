openapi: 3.0.0
info:
  title: Authentication Service API
  version: 1.0.0
  description: |
    RESTful API for user authentication, registration, and profile management in the UrbanPocket e-commerce platform.

    ## Features
    - User registration and authentication
    - JWT-based token management with refresh tokens
    - Cookie-based session management
    - User profile management
    - Address CRUD operations

    ## Authentication
    This API uses JWT (JSON Web Tokens) for authentication. Tokens are provided in two ways:
    - **HttpOnly Cookies**: Primary method for web applications (accessToken and refreshToken)
    - **Bearer Token**: Alternative method for mobile/API clients

    ## Response Format
    All API responses follow a consistent structure:

    **Success Response:**
    ```json
    {
      "success": true,
      "message": "Operation completed successfully",
      "data": { ... }
    }
    ```

    **Error Response:**
    ```json
    {
      "success": false,
      "message": "Error message",
      "error": {
        "code": "ERROR_CODE",
        "message": "Detailed error message",
        "details": null,
        "errorId": "unique-error-id"
      }
    }
    ```

  contact:
    name: UrbanPocket API Support
    url: https://urbanpocket.com/support
    email: support@urbanpocket.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3001
    description: Development server
  - url: https://api.urbanpocket.com
    description: Production server

tags:
  - name: Authentication
    description: User authentication and token management endpoints
  - name: User Profile
    description: User profile retrieval and management
  - name: Address Management
    description: CRUD operations for user addresses
  - name: System
    description: Health checks and system endpoints

paths:
  /api/auth/register:
    $ref: "./paths/auth.yaml#/~1api~1auth~1register"
  /api/auth/login:
    $ref: "./paths/auth.yaml#/~1api~1auth~1login"
  /api/auth/logout:
    $ref: "./paths/auth.yaml#/~1api~1auth~1logout"
  /api/auth/refresh-token:
    $ref: "./paths/auth.yaml#/~1api~1auth~1refresh-token"
  /api/auth/me:
    $ref: "./paths/auth.yaml#/~1api~1auth~1me"
  /api/auth/getAddresses:
    $ref: "./paths/auth.yaml#/~1api~1auth~1getAddresses"
  /api/auth/addAddress:
    $ref: "./paths/auth.yaml#/~1api~1auth~1addAddress"
  /api/auth/updateAddress:
    $ref: "./paths/auth.yaml#/~1api~1auth~1updateAddress"
  /api/auth/deleteAddress:
    $ref: "./paths/auth.yaml#/~1api~1auth~1deleteAddress"
  /api/auth/health:
    $ref: "./paths/auth.yaml#/~1api~1auth~1health"
  /api/auth/protected:
    $ref: "./paths/auth.yaml#/~1api~1auth~1protected"

components:
  schemas:
    # ============================================================================
    # All schemas are centrally managed and imported from schemas/index.yaml
    # This single reference imports all organized schemas for better maintainability
    # ============================================================================
    $ref: "./schemas/index.yaml"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT Access Token in Authorization header (e.g., 'Bearer <token>')"

    CookieAuth:
      type: apiKey
      in: cookie
      name: accessToken
      description: "JWT Access Token sent in an httpOnly cookie named 'accessToken'"
