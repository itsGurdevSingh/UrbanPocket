openapi: 3.0.0
info:
  title: Authentication Service API
  version: 1.0.0
  description: API for user authentication, registration, and management.

paths:
  /api/auth/register:
    post:
      summary: Register a new user
      description: Creates a new user account with the provided credentials.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegistration"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Bad Request - Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Conflict - User already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/login:
    post:
      summary: Log in a user
      description: Authenticates a user with email or username and a password, returning JWTs in httpOnly cookies.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - identifier
                - password
              properties:
                identifier:
                  type: string
                  description: The user's email or username.
                  example: "johndoe"
                password:
                  type: string
                  format: password
                  example: "strongPassword123"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logged in successfully"
                  user:
                    $ref: "#/components/schemas/UserPublicProfile"
        "400":
          description: Bad Request - Missing credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized - Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/auth/logout:
    post:
      summary: Log out a user
      description: Clears the authentication cookies, logging the user out.
      tags:
        - Authentication
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logged out successfully"

  /api/auth/refresh-token:
    post:
      summary: Refresh the access token
      description: Uses the refreshToken cookie to generate a new accessToken.
      tags:
        - Authentication
      responses:
        "200":
          description: Access token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token refreshed successfully"
        "401":
          description: Unauthorized - No refresh token provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Forbidden - Invalid refresh token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/profile:
    get:
      summary: Get current user's profile
      description: Retrieves the profile information of the currently authenticated user.
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPublicProfile"
        "401":
          description: Unauthorized - Invalid or missing access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    UserRegistration:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          example: "johndoe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          format: password
          description: "Minimum 8 characters"
          example: "strongPassword123"

    UserLogin:
      oneOf:
        - type: object
          required:
            - email
            - password
          properties:
            email:
              type: string
              format: email
              example: "john.doe@example.com"
            password:
              type: string
              format: password
              example: "strongPassword123"
        - type: object
          required:
            - username
            - password
          properties:
            username:
              type: string
              example: "johndoe"
            password:
              type: string
              format: password
              example: "strongPassword123"

    UserResponse:
      type: object
      properties:
        message:
          type: string
          example: "User registered successfully"
        user:
          $ref: "#/components/schemas/UserPublicProfile"

    UserPublicProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "a3b8d4c1-9e6a-4f2b-8b0e-7d1a5c8e3f9g"
        username:
          type: string
          example: "johndoe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "A user with this email already exists"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT Access Token sent in an httpOnly cookie, but required for this endpoint."
